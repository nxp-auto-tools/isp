// *-*- c -*-******************************************************************
// *
// *  Copyright Freescale 2013, All rights reserved.
// *  Copyright NXP 2017, All rights reserved.
// * 
// *  SPDX-License-Identifier: BSD-3-Clause
// *
// ***************************************************************************/
// ** \addtogroup Ipuv
// *  @{
// ***************************************************************************/
// ** 
// *  
// *  \file      IPUV.adl
// *  \author    Stephan Herrmann
// *  \date      \$Date: 2006/09/15 10:50:49 $
// *
// *  \internal
// *   language  ADL

// *   $Id: fsl_header.el,v 1.1 2006/09/15 10:50:49 norberts Exp $
// ***************************************************************************/

#include "IPUV_Defines.h"
#include "IPUV_HostRegs.adl"
#include "IPUV_Scalar.adl"
#include "IPUV_Vector.adl"
#ifdef HASACC
#include "IPUV_Accelerators.adl"
#endif
#include "IPUV_Flow.adl"
#include "IPUV_Done.adl"
#include "IPUV_StreamDMA.adl"

define (core = IPUV) {
  archs = (IPUV, IPUV_HostRegs, IPUV_StreamDMA, IPUV_Scalar, IPUV_Vector,
#ifdef HASACC
           IPUV_Accelerators,
#endif
           IPUV_Flow, IPUV_Done);
  //archs = (IPUV);
  instr_endianness=little;
  data_endianness=little;
  bit_endianness=little;
  attrs = (isp1,isp2);
  instrtables = (isp1,isp2);

#ifndef MAKEDOC
#ifdef PRECYCLE
  pre_cycle = {
#ifdef CL_LINE_DONE
    SIG_LINE_DONE=0; // lets reset from the system C wrapper
#endif
  };
#endif // (COMBINATORIAL | CL_LINE_DONE)

  post_cycle = {
    opixa_inc();
  };
#endif // MAKEDOC
}

define (arch = IPUV) {

#ifndef MAKEDOC
  bool OPIX_Valid(unsigned reg_no) {
    const bool opix_valid[256]= {
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  // IN
      1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
      1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,
      1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,  // OUT
      1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  // GPR
      1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
      1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,  // ACC
      1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,  // SACC
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    };
    return (bool) opix_valid[reg_no];
  }

  void opixa_inc(void) {
    if (I_OPIXA_INC == 1) {
      const int offset[256]= {
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    // IN
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,-39,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,-11,1,1,1,1,  // OUT
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    // GPR
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-31,
        1,1,1,1,1,1,1,-7,1,1,1,1,1,1,1,1,   // ACC
        1,1,1,1,1,1,1,-23,1,1,1,1,1,1,1,1,  // SACC
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-255
      };
      int opixa=OPIXA.uint32();
      OPIXA=opixa + offset[opixa];
    }
  }
#endif // MAKEDOC

  // The real-address size is fixed.
  define (ea_mask) {
    value = 0xffffffff;
  }

  // The real-address size is fixed.
  define (ra_mask) {
    value = 0xffffffff;
  }

  // ***********************************************************************
  // Registers
  // ***********************************************************************

  // output signal
  define (reg=SIG_LINE_DONE) {
    """
    Output Signal:
    Line Done. Asserts for one cycle when a line is done
    """;
    width = 1;

    // add a callback to this signal
    // in RTL:
    // in case of output channels:
    //    asserted once the last word was written to the SRAM
    // in case of no output channel:
    //    asserted once the last pixel was processes (last pipeline stage)
  }

  // Internal Registers
  define (reg=NIA) {
    """
    Internal Signal:
    Next instruction byte address. The two LSBs are alway zero.
    """;
    attrs = nia;
    width = 8;
    offset = 2;
  }

  define (reg=CC_ZNCO) {
    """
    Internal Register:
    The condition coder register:
    """;
    width = 4;
    define (field=O) {
      """
      Overflow flag: signed arithmetic's produced an value overflow
      """;
      bits = (0,0);
    }
    define (field=C) {
      """
      Carry flag: unsigned arithmetic's produced an value overflow
      """;
      bits = (1,1);
    }
    define (field=N) {
      """
      Negative flag: result is negative (bit[15] is set)
      """;
      bits = (2,2);
    }
    define (field=Z) {
      """
      Zero flag: result is 0
      """;
      bits = (3,3);
    }
  }

  // core registers
  //define (reg=IADDR) {
  //  """
  //  Core Register:
  //  Read register for instruction address (read only).
  //  """;
  //  width = 8;
  //  define (read) {
  //    action = { return CIA; };
  //  }
  //  define (write) {
  //    action = func(bits<8> val) { return; };
  //  }
  //}

  define (reg=IADDR) {
    """
    Core Register:
    Current instruction byte address. The two LSBs are alway zero.
    """;
    attrs = cia;
    width = 8;
    offset = 2;
  }

#ifdef LOOPCNT_B
  define (reg=LOOPCNT1) {
    """
    Core Register:
    2nd Loop counter
    """;
    width = 16;
  }
#endif

  define (reg=LOOPCNT) {
    """
    Core Register:
    Loop counter
    """;
    width = 16;
  }

  define (reg=XPOS) {
    """
    Core Register:
    X position counter
    This is updated by a Done type of instruction
    """;
    width=16;

#ifndef MAKEDOC
    define(write) {
      action = func (bits<16> val) {
        XPOS=val;
        if (XPOS>=I_XSIZE) End_Of_Line();
      };
    }
#endif // MAKEDOC
  }

  define (reg=YPOS) {
    """
    Core and Host Register:
    Y position register
    This is set by the host CPU
    """;
    width = 16;
  }

  define (reg=CONFALU) {
    """
    Core Register:
    Configuration register for arithmentic's in ALU
    """;
#ifdef SELAUTOINC
    width = 13;
#else
#ifdef ACC24
    width = 12;
#else
    width = 9;
#endif
#endif
    reset = 0x2;
    define (field= SGN) {
      """
      ALU uses signed or unsigned logic

      + 0: unsigned
      + 1: signed
      """;
      bits = (0,0);
    };
    reset = 0x2;
    define (field= SAT) {
      """
      ALU results are saturated according to signed/unsigned or overflow

      + 0: overflow
      + 1: saturate
      """;
      bits = (1,1);
    };
    define (field= SHR) {
      """
      MULH 32 bit result is shifted right by CONFALU.SHR bits to implement fixed point arithmetic's. The result after shift is 16 bit wide. The valid value range is from 0 to 16.
      """;
      bits = (8,4);
    };
#ifdef ACC24
    define (field= ACCSHR) {
      """
      ACC 24 bit result is shifted right by CONFALU.ACCSHR bits to implement fixed point arithmetic's. The result after shift is 16 bit wide. The valid value range is from 0 to 7.
      """;
      bits = (11,9);
    };
#endif
#ifdef SELAUTOINC
    define (field= OPIX0AUTOINC) {
      """
      Perform no automatic increment of OPIXA0 when OPIX0 is accessed for reading or writing (0=autoinc 1=no autoinc)
      """;
      bits = (12,12);
    };
#endif

#ifdef LOG_MORE
    define (write) {
#ifdef SELAUTOINC
      action = func (bits<13> val) {
#else
#ifdef ACC24
      action = func (bits<12> val) {
#else
      action = func (bits<9> val) {
#endif
#endif
        CONFALU=val;
        if (val(0) == 1) {info(1,"signed");} else {info(1,"unsigned");};
        if (val(1) == 1) {info(1,"saturate");} else {info(1,"overflow");};
        //info(1,(val(1) == 1)?"saturate":"overflow");
        info(1,"mulh shift right = ",val(8,4));
#ifdef ACC24
        info(1,"accumulator shift right = ",val(11,9));
#endif
#ifdef SELAUTOINC
        info(1,"opixa0 autoinc disable = ",val(12,12));
#endif
      };
    }
#endif
  }


  define (regfile=IN) {
    """
    Core Register:
    Input data register for 8x5 pixels

    +  IN[7]  IN[6]  IN[5]  IN[4]  IN[3]  IN[2]  IN[1]  IN[0]
    + IN[15] IN[14] IN[13] IN[12] IN[11] IN[10]  IN[9]  IN[8]
    + IN[23] IN[22] IN[21] IN[20] IN[19] IN[18] IN[17] IN[16]
    + IN[31] IN[30] IN[29] IN[28] IN[27] IN[26] IN[25] IN[24]
    + IN[39] IN[38] IN[37] IN[36] IN[35] IN[34] IN[33] IN[32]
    + (numbering for scan from left to right)
    """;
    size = 40;
    width = 16;
  }

  define (regfile=OUT) {
    """
    Core Register:
    Output pixel registers.
    """;
    size = 12; //(OUTPUT_STREAMS * 4);
    width = 16;
    //prefix = out;
  }

  define (regfile=GPR) {
    """
    Core Register:
    General purpose registers
    """;
    size = 32; 
    width = 16;
    //prefix = gpr;
  }

  define (regfile=ACC) {
    """
    Core Register:
    Accumulator registers
    Writing accumulates to the registers according to CONFALU.SGN.
    Reading returns the unsigned value according to CONFALU.SAT and
    CONFALU.ACCSHR.
    """;
    size = 8;  //# 16?
    width = 16;
    //prefix = acc;
    //readable = true;
    //writable = true;
#ifndef  MAKEDOC
    pseudo = true;
    define (read) {
      action = func(unsigned ix) {
#ifdef TESTBENCH
      I_TB_ACC_FLAG(ix) = 1;
#endif
#ifdef ACC24
        int acc;

        if (CONFALU.SGN==1) {  // signed arithmetics
          acc=IACC(ix).int32() >> CONFALU.ACCSHR.uint32();
        }
        else { // unsigned accumulate
          acc=IACC(ix).uint32() >> CONFALU.ACCSHR.uint32();
        }

        // saturate if required
        if (CONFALU.SAT==1) {
          if (acc > UMAX16) acc=UMAX16;
          else if (acc < UMIN16) acc=UMIN16;
        }
        else { // wrap
          acc=acc & 0xffff;
        }

        return acc;
#else // ACC16
        return IACC(ix);
#endif
      };
    }
    define (write) {
      action = func(unsigned ix, bits<16> val) {
        int acc,in;
        if (CONFALU.SGN==1) {
          //in=RES.int32();          // no clipped result
          in=val.int32();
          acc=IACC(ix).int32();
          acc+=in;
          if (CONFALU.SAT==1) {
            if (acc< SMINACC) acc=SMINACC;
            else if (acc> SMAXACC) acc=SMAXACC;
          }
        }
        else {
          //in=RES.uint32();          // no clipped result
          in=val.uint32();
          acc=IACC(ix).uint32();
          acc+=in;
          if (CONFALU.SAT==1) {
            if (acc> UMAXACC) acc=UMAXACC;
            //else if (acc < UMINACC) acc=UMINACC;
          }
        }
        IACC(ix) = acc;
      };
    }
#endif // MAKEDOC
  }

#ifdef TESTBENCH
  define (regfile=I_TB_ACC_FLAG) {
    """
    Internal registers:
    Used for TB , to flag read action performed by current command

    + bit 0: no read performed 

    + bit 1: read performed 
    """;
    width=1;
    reset=0x0;
    size  = 4;
    define (read) {
      action =  func(unsigned ix) {
        bits<1> flag_return;

        flag_return =  I_TB_ACC_FLAG(ix);

        //auto clear the flag to zero 
        I_TB_ACC_FLAG(ix) = 0; 

        return flag_return;
      };
    }
    define (write) {
      action = func(unsigned ix, bits<1> val) {
        I_TB_ACC_FLAG(ix) = val;
      };
    }
  }
#endif

  define (regfile=SACC) {
    """
    Core Register:
    Set accumulator registers
    Writing sets the corresponding ACC registers (according to CONFALU.SGN.
    Reading returns the unsigned value according to CONFALU.SAT and
    CONFALU.ACCSHR.
    """;
    size = 8;
    width = 16;
#ifndef  MAKEDOC
    pseudo = true;
    define (read) {
      action = func(unsigned ix) {
#ifdef TESTBENCH
        I_TB_SACC_FLAG(ix) = 1;
#endif
#ifdef ACC24
        int acc;

        if (CONFALU.SGN==1) {  // signed arithmetics
          acc=IACC(ix).int32() >> CONFALU.ACCSHR.uint32();
        }
        else { // unsigned accumulate
          acc=IACC(ix).uint32() >> CONFALU.ACCSHR.uint32();
        }

        // saturate if required
        if (CONFALU.SAT==1) {
          if (acc > SMAX16) acc=SMAX16;
          else if (acc < SMIN16) acc=SMIN16;
        }
        else { // wrap
          acc=acc & 0xffff;
        }

        return acc;
#else // ACC16
        return IACC(ix);
#endif
      };
    }
    define (write) {
      action = func(unsigned ix,  bits<16> val) {
        int in;
        if (CONFALU.SGN==1) {
          //in=RES.int32();          // no clipped result
          in=val.int32();
          //if (CONFALU.SAT==1) {    // setting will not require clipping
          //  if (in< SMIN24) in=SMIN24;
          //  else if (in> SMAX24) in=SMAX24;
          //}
        }
        else {
          //in=RES.uint32();          // no clipped result
          in=val.uint32();
          //if (CONFALU.SAT==1) {    // setting will not require clipping
          //  if (in> UMAX24) in=UMAX24;
          //  //else if (acc < UMIN24) acc=UMIN24;
          //}
        }
        IACC(ix) = in;
      };
    }
#endif // MAKEDOC
  }

#ifdef TESTBENCH
  define (regfile=I_TB_SACC_FLAG) {
    """
    Internal registers:
    Used for TB , to flag read action performed by current command

    + bit 0: no read performed 

    + bit 1: read performed 
    """;
    width=1;
    reset=0x0;
    size  = 4;
    define (read) {
      action =  func(unsigned ix) {
        bits<1> flag_return ;

        flag_return =  I_TB_SACC_FLAG(ix);

        //auto clear the flag to zero 
        I_TB_SACC_FLAG(ix) = 0; 

        return flag_return;
      };
    }
    define (write) {
      action = func(unsigned ix, bits<1> val) {
        I_TB_SACC_FLAG(ix) = val;
      };
    }
  }
#endif

#ifndef  MAKEDOC
  define (regfile=IACC) {
    """
    Internal Register:
    24 bit accumulator registers, can be read/write accessed via 16 bit
    Core Registers ACC and SACC
    """;
    size = 8;
#ifdef ACC24
    width = 24;
#else
    width = 16;
#endif
  }
#endif

  define (reg=OPIXA) {
    """
    Core Register:
    Indirect operand address register.
    """;
    width = 8;

#ifndef  MAKEDOC
    define (write) {
      action = func(bits<8> val) {
        OPIXA= val ;
        if (I_OPIXA_INC==1) I_OPIXA_INC=0;
      };
    }
#endif // MAKEDOC
  }

#ifndef  MAKEDOC
  define (reg=I_OPIXA_INC) {
    """
    Internal Signal:
    Indicating that OPIXA needs to be incremented.
    """;
    width = 1;
  }
#endif // MAKEDOC

  define (reg=OPIX) {
    """
    Core Register:
    Indirect operand register.
    """;
    width = 16;

#ifndef  MAKEDOC
    define (read) {
      action = {
        int doinc;

        // do not increment when read via DREGD!!
        doinc =(I_DREGDACCESS == 1)? 0 : CONFALU(12).int32();

#ifdef LOG_MORE
        OPIXA=OPIXA;
#endif

        var opix=(OPIX_Valid(OPIXA.uint32()))? R(OPIXA):0;
        //OPIXA=OPIXA+doinc;
        if (doinc && (I_OPIXA_INC==0)) I_OPIXA_INC=1;
        return opix;
      };
    }
    define (write) {
      action = func(bits<16> val) {
        int doinc;

        // do not increment when read via DREGD!!
        doinc =(I_DREGDACCESS == 1)? 0 : CONFALU(12).int32();

#ifdef LOG_MORE
        OPIXA=OPIXA;
#endif
        if (OPIX_Valid(OPIXA.uint32())) R(OPIXA)=val;
        //OPIXA=OPIXA+doinc;
        if (doinc && (I_OPIXA_INC==0)) I_OPIXA_INC=1;
      };
    }
#endif // MAKEDOC
  }

  define (reg=LOCK) {
    """
    Core Register:
    Lock Data Registers for read out via Host register interface (and debug).
    This is a security feature. The idea is that the kernel itself controls
    which registers contain result global data to be read by the application
    SW.
    All bits of this registers are asserted when a new line is started for
    processing.
    """;
    width = 16;
    reset = 0xffff;
    define (field=GPR0TO3) {
      """
      Lock status for GPR0-GPR3

      + 0: allow read access to GPR0-GPR3
      + 1: allow read access to GPR2-GPR3
      + 2: allow read access to GPR0
      + 3: allow read access to none of the registers GPR0-GPR3 (default)
      """;
      bits = (1,0);
    }
    define (field=GPR4TO7) {
      """
      Lock status for GPR4-GPR7


      + 0: allow read access to GPR4-GPR7
      + 1: allow read access to GPR6-GPR7
      + 2: allow read access to GPR4
      + 3: allow read access to none of the registers GPR4-GPR7 (default)
      """;
      bits = (3,2);
    }
    define (field=GPR8TO11) {
      """
      Lock status for GPR8-GPR11

      + 0: allow read access to GPR8 -GPR11
      + 1: allow read access to GPR10-GPR11
      + 2: allow read access to GPR8
      + 3: allow read access to none of the registers GPR8-GPR11 (default)
      """;
      bits = (5,4);
    }
    define (field=GPR12TO15) {
      """
      Lock status for GPR12-GPR15

      + 0: allow read access to GPR12-GPR15
      + 1: allow read access to GPR14-GPR15
      + 2: allow read access to GPR12
      + 3: allow read access to none of the registers GPR4-GPR7 (default)
      """;
      bits = (7,6);
    }
    define (field=GPR16TO19) {
      """
      Lock status for GPR16-GPR19

      + 0: allow read access to GPR16-GPR19
      + 1: allow read access to GPR18-GPR19
      + 2: allow read access to GPR16
      + 3: allow read access to none of the registers GPR16-GPR19 (default)
      """;
      bits = (9,8);
    }
    define (field=GPR20TO23) {
      """
      Lock status for GPR20-GPR23

      + 0: allow read access to GPR20-GPR23
      + 1: allow read access to GPR22-GPR23
      + 2: allow read access to GPR20
      + 3: allow read access to none of the registers GPR20-GP23 (default)
      """;
      bits = (11,10);
    }
    define (field=GPR24TO27) {
      """
      Lock status for GPR24 -GPR27

      + 0: allow read access to GPR24 -GPR27
      + 1: allow read access to GPR26-GPR27
      + 2: allow read access to GPR24
      + 3: allow read access to none of the registers GPR24-GPR27 (default)
      """;
      bits = (13,12);
    }
    define (field=GPR28TO31) {
      """
      Lock status for GPR28-GPR31

      + 0: allow read access to GPR28-GPR31
      + 1: allow read access to GPR30-GPR31
      + 2: allow read access to GPR28
      + 3: allow read access to none of the registers GPR28-GPR31 (default)
      """;
      bits = (15,14);
    }
  }

  define (reg=ONE) {
    """
    Core Register:
    -1 constant, read only
    """;
    width = 16;
    reset = 0xffff;
    //readable = true;
    //writable = false; 
#ifndef  MAKEDOC
    define (read) {
      action = { return 0xffff;};
    }
    define (write) {
      action = func(bits<16> val) { return; };  // do nothing
    }
#endif // MAKEDOC
  }

  define (reg=ZERO) {
    """
    Core Register:
    0 constant, read only
    """;
    width = 16;
    //readable = true;
    //writable = false; 
#ifndef  MAKEDOC
    define (read) {
      action = { return 0;};
    }
    define (write) {
      action = func(bits<16> val) { return; };  // do nothing
    }
#endif // MAKEDOC
  }

  // aliases to the registers ********************
  // scalar registers ****************************
  define (regfile=R) {
    """
    Core Register:
    All registers
    """;
    size  = 256;
    width = 16;
#ifdef IGNORE_UNKNOWN_REG
    invalid_entry_read = func (unsigned ix) {
      return 0;
    };
    invalid_entry_write = func (unsigned ix, bits<16> value) {
    };
#endif
#ifdef LOOPCNT_B
    define (entry=  0x0)  { reg = LOOPCNT1; }
#endif
    define (entry=  0x1)  { reg = LOOPCNT; }
    define (entry=  0x2)  { reg = XPOS; }
    define (entry=  0x3)  { reg = YPOS; }
    define (entry=  0x4)  { reg = CONFALU; }
    //define (entry=  0x4)  { reg = CONFSAT; }
    //define (entry=  0x5)  { reg = CONFSGN; }
    //define (entry=  0x6)  { reg = CONFSHR; }
    define (entry= 0x10)  { reg = IN; } // - 0x37
    define (entry= 0x38)  { reg = MASKV; }
    define (entry= 0x39)  { reg = MASKVQ; }
    define (entry= 0x3a)  { reg = VFLAG_O; };
    define (entry= 0x3b)  { reg = VFLAG_C; };
    define (entry= 0x3c)  { reg = VFLAG_N; };
    define (entry= 0x3d)  { reg = VFLAG_Z; };
    //define (entry= 0x3e)  { reg = VFLAG_L; };
    //define (entry= 0x3f)  { reg = VFLAG_U; };
    define (entry= 0x40)  { reg = OUT; } // - 0x4b
    define (entry= 0x50)  { reg = GPR; } // - 0x6f
    define (entry= 0x70)  { reg = ACC; } // - 0x77
    define (entry= 0x80)  { reg = SACC; }// - 0x87
    define (entry= 0x90)  { reg = OPIXA; }
    define (entry= 0x91)  { reg = OPIX; }
    define (entry= 0xfc)  { reg = LOCK; }
    define (entry= 0xfe)  { reg = ONE; }
    define (entry= 0xff)  { reg = ZERO; }
    //prefix = r;
  }


  // ***********************************************************************
  // Instruction Fields
  // ***********************************************************************

  define (instrfield=TYPE) {
    """
    Primary instruction type
    """;
    bits = (31,28);
    enumerated = ("Reserved8", "Reserved7", "Reserved6", "Reserved5",
                  "Reserved4", "Reserved3", "Reserved2", "Reserved1",
                  "Flow", "S=SxI", "S=SxS", "Reserved",
                  "S=VxS", "S=VxV", "V=VxS", "V=VxV");
    display = dec;
  }

  define (instrfield=OPCD) {
    """
    Extended opcode
    """;
    bits = (27,24);
  }

  define (instrfield=DEST) {
    """
    Scalar destination register
    """;
    bits = (23,16);
    display = dec;
#include "IPUV_Registers.h"
  }

  define (instrfield=IN1) {
    """
    Operator 1 register
    """;
    bits = (15,8);
    display = dec;
#include "IPUV_Registers.h"
  }

  define (instrfield=IN2) {
    """
    Operator 2 register
    """;
    bits = (7,0);
    display = dec;
#include "IPUV_Registers.h"
  }

  define (instrfield=IM16) {
    """
    Operator 2 immediate 16 bits
    """;
    bits = (15,0);
  }

  define (instrfield=CLZBITS) {
    """
    CLZ vs. LSL bit
    """;
    bits = (6,4);
    //display = dec;
    is_signed=false;
  }

  define (instrfield=IM4) {
    """
    Operator 2 immediate 4 bits
    """;
    bits = (3,0);
    display = dec;
    is_signed=false;
  }

  define (instrfield=IXO) {
    """
    Increment input, xposition, output
    """;
    bits = (2,0);
    enumerated = ("-", "o", "x", "xo", "i", "io", "ix", "ixo");
  }

  define (instrfield=RELADDR) {
    """
    Relative branch target address
    """;
    bits = (15,8);
    addr = pc;
    shift = 2;
    display = hex;
    is_signed=true;
  };

#ifdef LOOPCNT_B
  define (instrfield=LCNT) {
    """
    Loop counter selection
    """;
    bits = (3,3);
    enumerated = ("loopcnt1", "loopcnt");
  };
#endif

  // ***********************************************************************
  // Instructions
  // ***********************************************************************

  // *** nop
  define (instr=nop) {
    """
    No OPeration
    """;
    width = 32;
    attrs=(isp1,isp2);
    fields=(TYPE(0),OPCD(0),IM16(0));
    syntax=("nop");
    action = {
      return;
    };
  }

  // *** nop - halt
  define (instr=halt) {
    """
    halt: terminate line immediatly
    """;
    width = 32;
    attrs=(isp1,isp2);
    fields=(TYPE(0),OPCD(0),IM16(1));
    syntax=("halt");
    action = {
      End_Of_Line();
      //halt(); // done in End_Of_Line
    };
  }

  // *** nop - debug
  define (instr=dbg) {
    """
    dbg: enter debug mode
    """;
    width = 32;
    attrs=(isp1,isp2);
    fields=(TYPE(0),OPCD(0),IM16(2));
    syntax=("dbg");
    action = {
      halt(); // give back control to simulator
    };
  }

  // loop
  define (instr=loop) {
    """
    loop, check LOOPCNT > 1 and if yes then jump back to loop start.
    The loop counter LOOPCNT gives how often we will go through the loop,
    thus, LOOPCNT == 2 will jump back once to iterate twice
    """;
    width = 32;
    attrs=(isp1,isp2);
#ifdef LOOPCNT_B
    fields=(TYPE(0),OPCD(6),LCNT(0),RELADDR);
#else
    fields=(TYPE(0),OPCD(6),RELADDR);
#endif
    syntax=("loop %f", RELADDR);
    action = {
      if (LOOPCNT>1) {
        NIA=RELADDR;
      }
      if (LOOPCNT!=0) {
        LOOPCNT=LOOPCNT-1;
      }
    };
  }

#ifdef LOOPCNT_B
  define (instr=loop1) {
    """
    loop1, check LOOPCNT1 > 1 and if yes then jump back to loop start.
    The loop counter LOOPCNT1 gives how often we will go through the loop,
    thus, LOOPCNT1 == 2 will jump back once to iterate twice
    """;
    width = 32;
    attrs=(isp2);
    fields=(TYPE(0),OPCD(6),LCNT(1),RELADDR);
    syntax=("loop1 %f", RELADDR);
    action = {
      if (LOOPCNT1>1) {
        NIA=RELADDR;
      }
      if (LOOPCNT1!=0) {
        LOOPCNT1=LOOPCNT1-1;
      }
    };
  }
#endif

}

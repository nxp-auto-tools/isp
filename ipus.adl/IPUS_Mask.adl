// *-*- c -*-******************************************************************
// *
// *  Copyright Freescale 2013, All rights reserved.
// *  Copyright NXP 2017, All rights reserved.
// * 
// *  SPDX-License-Identifier: BSD-3-Clause
// *
// ****************************************************************************
// /** \addtogroup Ipus
// *  Place the description of a module here.
// *  @{
// ****************************************************************************
// /** 
// *  
// *  \file      IPUS_Mask.adl
// *  \author    Herrmann Stephan-R70157
// *  \date      \$Date: 2013/08/01 10:50:49 $
// *
// *  \internal
// *   language  ADL
// *   $Id: fsl_header.el,v 1.1 2013/09/15 10:50:49 stephanh Exp $
// ****************************************************************************

define (arch = IPUS_Mask) {


  // Mask ALU.
  void maskalu(maskalu_op_t maskalu_op,
               bits<2> idx1,bits<16> op2) {

    int i;
    //    bits<18> res0, res1, res2, res3;
    
    MASKOP1(idx1)=0;
    MASKOP2=op2;

    switch (maskalu_op) {
    case MASKALU_OP_SEL: // select
      for (i=0; i<9; i++) {
        MASKRES(i)=(MASKOP1(i) == MASKOP2)? NHOOD(i) : 0;
      }
      break;
    case MASKALU_OP_INV: // invert mask
      for (i=0; i<9; i++) {
        MASKRES(i)=(MASKOP1(i)==0)? NHOOD(i) : 0 ;
      }
      break;
    case MASKALU_OP_THR: // threshold
      for (i=0; i<9; i++) {
        MASKRES(i)=(MASKOP1(i).uint32() >= MASKOP2.uint32())? NHOOD(i) : 0;
      }
      break;
    case MASKALU_OP_ITH: // inverse threshold
      for (i=0; i<9; i++) {
        MASKRES(i)=(MASKOP1(i).uint32() <= MASKOP2.uint32())? NHOOD(i) : 0;
      }
      break;
    case MASKALU_OP_AND: // mask out
      for (i=0; i<9; i++) {
        MASKRES(i)=(MASKOP1(i) != 0)? MASKOP2(i) : 0 ;
      }
      break;
    default:  //MASKALU_OP_SET
      for (i=0; i<9; i++) {
        MASKRES(i)=MASKOP2(i);
      }
      break;
    }
  }


  // ****************************************************************************
  // *  Registers
  // ****************************************************************************

  // Internal Registers
  define (regfile=MASKOP1) {
    """
    Internal Signal: Matrix operand 1, input to Mask ALU
    """;
    width = 16;
    size  = 9;
    define (write) {
      action = func (unsigned index, bits<16> val) {
        int i;
        switch (index) {
        case 0: // W
          for (i=0; i<9; i++) {
            MASKOP1(i) = W(i);
          }
          break;
        case 1: // INALPHA
          for (i=0; i<9; i++) {
#ifdef HASINALPHA
            MASKOP1(i) = INALPHA(i);
#else
            MASKOP1(i) = 0;
#endif
          }
          break;
          //case 1: // INA
          //  for (i=0; i<9; i++) {
          //    MASKOP1(i) = INA(i);
          //  }
          //  break;
        case 2: // WW
          for (i=0; i<9; i++) {
            MASKOP1(i) = WW(i);
          }
          break;
          //case 3: // INB
          //  for (i=0; i<9; i++) {
          //    MASKOP1(i) = INB(i);
          //  }
          //  break;
        case 5: // Mask
          for (i=0; i<9; i++) {
            MASKOP1(i) = MASK(i);
          }
          break;
        }
      };
    }
  }

  // Internal Registers
  define (reg=MASKOP2) {
    """
    Internal Signal:
    Bit vector operand 2, input to Mask ALU
    """;
    width = 16;
    define (write) {
      action = func (bits<16> val) {
        MASKOP2=val;
      };
    }
  }


  define (regfile=MASKRES) {
    """
    Internal Signal:
    Matrix result of Mask ALU before saturation
    """;
    width = 1;
    size  = 9;
  }

  //// scalar registers ****************************
  //defmod (regfile=R) {
  //
  //}

  // ****************************************************************************
  // *  Instruction Fields
  // ****************************************************************************

  define (instrfield=MASKIN1) {
    """
    Matrix Operator 1 register

    + 0: W

    + 1: INALPHA

    + 2: WW

    + 3: Reserved
    """;
    bits = (17,16);
    display = dec;
    enumerated = ("w","inalpha","ww","reserved");
  }

  // ****************************************************************************
  // *  Instructions
  // ****************************************************************************


  // mset *****************************
  define (instr=mask_set_I) {
    """
    use bit vector from a constant and copy it to the MASK bits

    MASK[i] = IM9[i]
    """;
    attrs=(isp1,isp2);
    fields=(TYPE(3),OPCD(0),IM16);
    syntax = ("mset %f",IM16);
    action = {
      int i;
      maskalu(MASKALU_OP_SET, 1, IM16);
      for (i=0; i<9; i++) { MASK(i) = MASKRES(i); };
    };
  }

  define (instr=maks_set_S) {
    """
    use bit vector from a register and copy it to the MASK bits

    MASK[i] = R[IN2][i]
    """;
    attrs=(isp1,isp2);
    fields=(TYPE(4),OPCD(0),IN2);
    syntax = ("mset %f",IN2);
    action = {
      int i;
      maskalu(MASKALU_OP_SET, 1, R(IN2));
      for (i=0; i<9; i++) { MASK(i) = MASKRES(i); };
    };
  }

  // msel *****************************
  define (instr=mask_sel_I) {
    """
    Select MASK if Matrix value is equal to a constant 

    MASK[i] = (MASKIN[i] == IM16)? NHOOD[i] : 0;
    """;
    attrs=(isp1,isp2);
    fields=(TYPE(3),OPCD(1),MASKIN1,IM16);
    syntax = ("mset %f,%f",MASKIN1,IM16);
    action = {
      int i;
      maskalu(MASKALU_OP_SEL, MASKIN1, IM16);
      for (i=0; i<9; i++) { MASK(i) = MASKRES(i); };
    };
  }

  define (instr=maks_sel_S) {
    """
    Select MASK if Matrix value is equal to a register value 

    MASK[i] = (MASKIN[i] == IN2)? NHOOD[i] : 0;

    """;
    attrs=(isp1,isp2);
    fields=(TYPE(4),OPCD(1),MASKIN1,IN2);
    syntax = ("mset %f,%f",MASKIN1,IN2);
    action = {
      int i;
      maskalu(MASKALU_OP_SEL, MASKIN1, R(IN2));
      for (i=0; i<9; i++) { MASK(i) = MASKRES(i); };
    };
  }

  // minv *****************************zero
  define (instr=mask_inv_I) {
    """
    Invert MASK bits and mask out using NHOOD

    MASK[i] = (!MASK[i]) && NHOOD[i]
    """;
    attrs=(isp1,isp2);
    fields=(TYPE(3),OPCD(2));
    syntax = ("minv");
    action = {
      int i;
      maskalu(MASKALU_OP_INV, 1, 0);
      for (i=0; i<9; i++) { MASK(i) = MASKRES(i); };
    };
  }

  // mthr *****************************
  define (instr=mask_thr_I) {
    """
    Select MASK if Matrix value is bigger or equal than constant 

    MASK[i] = (MASKIN[i] >= IM16)? NHOOD[i] : 0;
    """;
    attrs=(isp1,isp2);
    fields=(TYPE(3),OPCD(4),MASKIN1,IM16);
    syntax = ("mthr %f,%f",MASKIN1,IM16);
    action = {
      int i;
      maskalu(MASKALU_OP_THR, MASKIN1, IM16);
      for (i=0; i<9; i++) { MASK(i) = MASKRES(i); };
    };
  }

  define (instr=maks_thr_S) {
    """
    Select MASK if Matrix value is bigger or equal than register value 

    MASK[i] = (MASKIN[i] >= IN2)? NHOOD[i] : 0;

    """;
    attrs=(isp1,isp2);
    fields=(TYPE(4),OPCD(4),MASKIN1,IN2);
    syntax = ("mthr %f,%f",MASKIN1,IN2);
    action = {
      int i;
      maskalu(MASKALU_OP_THR, MASKIN1, R(IN2));
      for (i=0; i<9; i++) { MASK(i) = MASKRES(i); };
    };
  }

  // mith *****************************
  define (instr=mask_ith_I) {
    """
    Select MASK if Matrix value is less or equal than constant 

    MASK[i] = (MASKIN[i] <= IM16)? NHOOD[i] : 0;
    """;
    attrs=(isp1,isp2);
    fields=(TYPE(3),OPCD(5),MASKIN1,IM16);
    syntax = ("mith %f,%f",MASKIN1,IM16);
    action = {
      int i;
      maskalu(MASKALU_OP_ITH, MASKIN1, IM16);
      for (i=0; i<9; i++) { MASK(i) = MASKRES(i); };
    };
  }

  define (instr=maks_ith_S) {
    """
    Select MASK if Matrix value is less or equal than register value 


    MASK[i] = (MASKIN[i] == IN2)? NHOOD[i] : 0;

    """;
    attrs=(isp1,isp2);
    fields=(TYPE(4),OPCD(5),MASKIN1,IN2);
    syntax = ("mith %f,%f",MASKIN1,IN2);
    action = {
      int i;
      maskalu(MASKALU_OP_ITH, MASKIN1, R(IN2));
      for (i=0; i<9; i++) { MASK(i) = MASKRES(i); };
    };
  }

  // mand *****************************
  define (instr=mask_and_I) {
    """
    Select MASK if Matrix value is less than constant 

    MASK[i] = (MASKIN[i] == IM16)? NHOOD[i] : 0;
    """;
    attrs=(isp1,isp2);
    fields=(TYPE(3),OPCD(7),IM16);
    syntax = ("mand %f",IM16);
    action = {
      int i;
      maskalu(MASKALU_OP_AND, 1, IM16);
      for (i=0; i<9; i++) { MASK(i) = MASKRES(i); };
    };
  }

  define (instr=maks_and_S) {
    """
    Select MASK if Matrix value is less than register value 


    MASK[i] = (MASKIN[i] == IM16)? NHOOD[i] : 0;

    """;
    attrs=(isp1,isp2);
    fields=(TYPE(4),OPCD(7),IN2);
    syntax = ("mand %f",IN2);
    action = {
      int i;
      maskalu(MASKALU_OP_AND, 1, R(IN2));
      for (i=0; i<9; i++) { MASK(i) = MASKRES(i); };
    };
  }
}

